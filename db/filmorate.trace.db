2023-06-15 02:02:58 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "CREATE TABLE IF NOT EXISTS [*]user( id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, email VARCHAR(255) NOT NULL, login VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, birthday DATE NOT NULL )"; ожидалось "identifier"
Syntax error in SQL statement "CREATE TABLE IF NOT EXISTS [*]user( id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, email VARCHAR(255) NOT NULL, login VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, birthday DATE NOT NULL )"; expected "identifier"; SQL statement:
CREATE TABLE IF NOT EXISTS user( id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, email VARCHAR(255) NOT NULL, login VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, birthday DATE NOT NULL ) [42001-214]
2023-06-15 02:04:29 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "CREATE TABLE IF NOT EXISTS [*]User ( id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, email VARCHAR(255) NOT NULL, login VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, birthday DATE NOT NULL )"; ожидалось "identifier"
Syntax error in SQL statement "CREATE TABLE IF NOT EXISTS [*]User ( id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, email VARCHAR(255) NOT NULL, login VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, birthday DATE NOT NULL )"; expected "identifier"; SQL statement:
CREATE TABLE IF NOT EXISTS User ( id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, email VARCHAR(255) NOT NULL, login VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, birthday DATE NOT NULL ) [42001-214]
2023-06-15 02:06:53 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "CREATE TABLE IF NOT EXISTS [*]user ("; ожидалось "identifier"
Syntax error in SQL statement "CREATE TABLE IF NOT EXISTS [*]user ("; expected "identifier"; SQL statement:
CREATE TABLE IF NOT EXISTS user ( [42001-214]
2023-06-15 02:07:59 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "CREATE TABLE IF NOT EXISTS [*]user ( id INTEGER GENERATED BY DEFAULT AS IDENTITY, email VARCHAR(255) NOT NULL, login VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, birthday DATE NOT NULL )"; ожидалось "identifier"
Syntax error in SQL statement "CREATE TABLE IF NOT EXISTS [*]user ( id INTEGER GENERATED BY DEFAULT AS IDENTITY, email VARCHAR(255) NOT NULL, login VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, birthday DATE NOT NULL )"; expected "identifier"; SQL statement:
CREATE TABLE IF NOT EXISTS user ( id INTEGER GENERATED BY DEFAULT AS IDENTITY, email VARCHAR(255) NOT NULL, login VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, birthday DATE NOT NULL ) [42001-214]
2023-06-15 02:12:37 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "CREATE TABLE IF NOT EXISTS friendship ( user_id INTEGER REFERENCES [*]user (id) ON DELETE CASCADE, friend_id INTEGER REFERENCES user (id) ON DELETE CASCADE, confirmation BOOLEAN )"; ожидалось "identifier"
Syntax error in SQL statement "CREATE TABLE IF NOT EXISTS friendship ( user_id INTEGER REFERENCES [*]user (id) ON DELETE CASCADE, friend_id INTEGER REFERENCES user (id) ON DELETE CASCADE, confirmation BOOLEAN )"; expected "identifier"; SQL statement:
CREATE TABLE IF NOT EXISTS friendship ( user_id INTEGER REFERENCES user (id) ON DELETE CASCADE, friend_id INTEGER REFERENCES user (id) ON DELETE CASCADE, confirmation BOOLEAN ) [42001-214]
2023-06-15 02:14:40 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "CREATE TABLE IF NOT EXISTS [*]like ( film_id INTEGER REFERENCES film (id) ON DELETE CASCADE, user_id INTEGER REFERENCES users (id) ON DELETE CASCADE )"; ожидалось "identifier"
Syntax error in SQL statement "CREATE TABLE IF NOT EXISTS [*]like ( film_id INTEGER REFERENCES film (id) ON DELETE CASCADE, user_id INTEGER REFERENCES users (id) ON DELETE CASCADE )"; expected "identifier"; SQL statement:
CREATE TABLE IF NOT EXISTS like ( film_id INTEGER REFERENCES film (id) ON DELETE CASCADE, user_id INTEGER REFERENCES users (id) ON DELETE CASCADE ) [42001-214]
2023-06-15 10:51:33 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "ID" не найден
Column "ID" not found; SQL statement:
CREATE TABLE IF NOT EXISTS "genre" ( "film_id" INTEGER REFERENCES "film" (id) ON DELETE CASCADE PRIMARY KEY, "genre" VARCHAR(255) ) [42122-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:749)
	at org.h2.table.IndexColumn.mapColumns(IndexColumn.java:184)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:218)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:72)
	at org.h2.command.ddl.AlterTable.update(AlterTable.java:46)
	at org.h2.command.ddl.CommandWithColumns.createConstraints(CommandWithColumns.java:83)
	at org.h2.command.ddl.CreateTable.update(CreateTable.java:134)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:252)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:252)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:97)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:75)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:910)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:731)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1303)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1292)
	at ru.yandex.practicum.filmorate.FilmorateApplication.main(FilmorateApplication.java:10)
2023-06-15 11:21:57 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "CREATE TABLE IF NOT EXISTS friendship ( user_id INTEGER [*]ON DELETE CASCADE, friend_id INTEGER ON DELETE CASCADE, confirmation BOOLEAN NOT NULL, CONSTRAINT friendship_userId_fkey FOREIGN KEY (user_id) REFERENCE users (id), CONSTRAINT friendship_friendId_fkey FOREIGN KEY (user_id) REFERENCE users (id), )"; ожидалось "ARRAY, INVISIBLE, VISIBLE, NOT NULL, NULL, AS, DEFAULT, GENERATED, ON UPDATE, NOT NULL, NULL, AUTO_INCREMENT, DEFAULT ON NULL, NULL_TO_DEFAULT, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, COMMENT, PRIMARY KEY, UNIQUE, NOT NULL, NULL, CHECK, REFERENCES, AUTO_INCREMENT, ,, )"
Syntax error in SQL statement "CREATE TABLE IF NOT EXISTS friendship ( user_id INTEGER [*]ON DELETE CASCADE, friend_id INTEGER ON DELETE CASCADE, confirmation BOOLEAN NOT NULL, CONSTRAINT friendship_userId_fkey FOREIGN KEY (user_id) REFERENCE users (id), CONSTRAINT friendship_friendId_fkey FOREIGN KEY (user_id) REFERENCE users (id), )"; expected "ARRAY, INVISIBLE, VISIBLE, NOT NULL, NULL, AS, DEFAULT, GENERATED, ON UPDATE, NOT NULL, NULL, AUTO_INCREMENT, DEFAULT ON NULL, NULL_TO_DEFAULT, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, COMMENT, PRIMARY KEY, UNIQUE, NOT NULL, NULL, CHECK, REFERENCES, AUTO_INCREMENT, ,, )"; SQL statement:
CREATE TABLE IF NOT EXISTS friendship ( user_id INTEGER ON DELETE CASCADE, friend_id INTEGER ON DELETE CASCADE, confirmation BOOLEAN NOT NULL, CONSTRAINT friendship_userId_fkey FOREIGN KEY (user_id) REFERENCE users (id), CONSTRAINT friendship_friendId_fkey FOREIGN KEY (user_id) REFERENCE users (id), ) [42001-214]
2023-06-15 11:27:21 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "CREATE TABLE IF NOT EXISTS friendship ( user_id INTEGER [*]ON DELETE CASCADE, friend_id INTEGER ON DELETE CASCADE, confirmation BOOLEAN NOT NULL, CONSTRAINT friendship_userId_fkey FOREIGN KEY (user_id) REFERENCES users (id), CONSTRAINT friendship_friendId_fkey FOREIGN KEY (user_id) REFERENCES users (id), )"; ожидалось "ARRAY, INVISIBLE, VISIBLE, NOT NULL, NULL, AS, DEFAULT, GENERATED, ON UPDATE, NOT NULL, NULL, AUTO_INCREMENT, DEFAULT ON NULL, NULL_TO_DEFAULT, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, COMMENT, PRIMARY KEY, UNIQUE, NOT NULL, NULL, CHECK, REFERENCES, AUTO_INCREMENT, ,, )"
Syntax error in SQL statement "CREATE TABLE IF NOT EXISTS friendship ( user_id INTEGER [*]ON DELETE CASCADE, friend_id INTEGER ON DELETE CASCADE, confirmation BOOLEAN NOT NULL, CONSTRAINT friendship_userId_fkey FOREIGN KEY (user_id) REFERENCES users (id), CONSTRAINT friendship_friendId_fkey FOREIGN KEY (user_id) REFERENCES users (id), )"; expected "ARRAY, INVISIBLE, VISIBLE, NOT NULL, NULL, AS, DEFAULT, GENERATED, ON UPDATE, NOT NULL, NULL, AUTO_INCREMENT, DEFAULT ON NULL, NULL_TO_DEFAULT, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, COMMENT, PRIMARY KEY, UNIQUE, NOT NULL, NULL, CHECK, REFERENCES, AUTO_INCREMENT, ,, )"; SQL statement:
CREATE TABLE IF NOT EXISTS friendship ( user_id INTEGER ON DELETE CASCADE, friend_id INTEGER ON DELETE CASCADE, confirmation BOOLEAN NOT NULL, CONSTRAINT friendship_userId_fkey FOREIGN KEY (user_id) REFERENCES users (id), CONSTRAINT friendship_friendId_fkey FOREIGN KEY (user_id) REFERENCES users (id), ) [42001-214]
